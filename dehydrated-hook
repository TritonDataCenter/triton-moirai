# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Copyright 2025 MNX Cloud, Inc.

# shellcheck shell=bash

function restart_service() {
    local SERVICE="${1}"

    # This hook is called once for each service to restart
    #
    # Parameters:
    # - SERVICE
    #   The service identifier to restart

    if svcs -H "${SERVICE}" | grep ^online; then
        printf 'Restarting %s...' "${SERVICE}"
        svcadm restart "${SERVICE}"
        printf 'done.\n'
    else
        printf 'Service "%s" is not online, skipping.\n' "${service}"
    fi
}

function ensure_haproxy {
    haproxy_state=$(svcs -Ho state haproxy)
    case "$haproxy_state" in
        disabled)
            svcadm enable -s haproxy ;;
        maintenance)
            svcadm clear haproxy ;;
        online)
            # Graceful restart of haproxy to avoid disrupting any connections.
            # Don't let this fail so we don't get caught by errexit.
            pkill -USR2 -c "$(svcs -Ho ctid haproxy)" haproxy || true;;
        *)
            echo 'HAProxy non-actionable state: %s' "$haproxy_state"
            ;;
    esac
}

function ensure_haproxy_links {
    local certdir="${1}"

    # We need a default symlink to CERTDIR so that haproxy doesn't need to know
    # the name.
    ln -sf "$(basename $certdir)" "$certdir/../default"

    # We also need a properly named symlink for haproxy to find the private key
    ln -sf privkey.pem "$certdir/fullchain.pem.key"
}

function deploy_cert {
    local domain="${1}" keyfile="${2}" certfile="${3}" fullchainfile="${4}" chainfile="${5}"

    if [[ -n "$OWNER" ]]; then
        chown -R "$OWNER" "${CERTDIR:?}"
    fi

    # Ensure all expected symlinks exist
    ensure_haproxy_links "$(dirname $fullchainfile)"

    # Really, we don't expect users to be installing anything beyond haproxy
    # that is already present. But we'll still leave the possibility, just
    # in case.
    for service in "${SERVICES[@]}"; do
        restart_service "$service"
    done

    # Unlike other services, we will make every attempt to bring haproxy to
    # online state if it isn't, for whatever reason.
    ensure_haproxy
}

function unchanged_cert {
    # shellcheck disable=SC2034
    local domain="${1}" keyfile="${2}" certfile="${3}" fullchainfile="${4}" chainfile="${5}"

    ensure_haproxy_links "$(dirname $fullchainfile)"
    echo "Certificate unchanged."
}

if [[ -f ${BASEDIR:?}/config.overrides ]]; then
    # shellcheck disable=SC1091
    source "${BASEDIR}/config.overrides"
fi
